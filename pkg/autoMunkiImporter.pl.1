.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AUTOMUNKIIMPORTER 1"
.TH AUTOMUNKIIMPORTER 1 "2012-07-30" "v0.1.0" "Tool Reference Manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
autoMunkiImporter \- Automatically import apps into Munki
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
autoMunkiImporter.pl \-\-data /path/to/data[.plist] [options]
.PP
.Vb 9
\& Options:
\&        \-\-data /path/to/data[.plist]            Path to the data plist or directory containing data plists (required)
\&        \-\-download                              Only download the file (doesn\*(Aqt import into Munki)
\&        \-\-help | \-?                             Show this help text
\&        \-\-ignoreModDate                         Ignore the modified date and version info from the data plist
\&        \-\-progress                              Prints progress information to STDOUT
\&        \-\-reset                                 Resets the modified date for an app
\&        \-\-verbose                               Show verbose output to STDOUT
\&        \-\-version                               Prints scripts version to STDOUT
\&
\&        perldoc autoMunkiImporter.pl            For more detailed information
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-data\fR /path/to/data[.plist]" 8
.IX Item "--data /path/to/data[.plist]"
Path to the data plist, or a directory containing data plists (required). The data plist contains 
the specific configuring this script to download a particular app.
.Sp
See \fB\s-1DATA\s0 \s-1PLIST\s0\fR for structure of the plist.
.IP "\fB\-\-download | \-n\fR" 8
.IX Item "--download | -n"
Download the file to /tmp, without importing the item to Munki. It does \fBnot\fR update the modified 
time or import to Munki.
.IP "\fB\-\-help | \-?\fR" 8
.IX Item "--help | -?"
Show this help text
.IP "\fB\-\-ignoreModDate\fR" 8
.IX Item "--ignoreModDate"
Ignore the modified date and version info from the data plist and exit. This will cause the item to 
be (re)imported into Munki.
.IP "\fB\-\-progress\fR" 8
.IX Item "--progress"
Reports progress of the script to \s-1STDOUT\s0
.IP "\fB\-\-reset\fR" 8
.IX Item "--reset"
Resets the modified date of an app to the current modification date, without downloading or 
importing the item into Munki. Use this when the latest version of an app is in your Munki repo, so 
that this script doesn't attempt to re add it, of if you want to skip a version.
.IP "\fB\-\-verbose\fR" 8
.IX Item "--verbose"
In addition to writing to the log, show log and progress messages on \s-1STDOUT\s0
.IP "\fB\-\-version\fR" 8
.IX Item "--version"
Displays the scripts version
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBautoMunkiImporter.pl\fR will based on the input data determine if there is a new version of an 
application available. If a new version is available it will download the new file, extract it, and 
then import it into Munki.
.PP
It can handle static urls, dynamic urls where the \s-1URL\s0 or link to the url change based off the 
version (it can also handle landing pages before the actual download), and sparkle rss feeds. This 
generic approach should allow you to monitor most applications.
.PP
It supports downloads in flat PKGs, \s-1DMG\s0 (including support for disk images with licence agreements), 
\&\s-1ZIP\s0, \s-1TAR\s0 \s-1TAR\s0.GZ, \s-1TGZ\s0, and \s-1TBZ\s0. It will import a single item (\s-1APP\s0 or \s-1PKG\s0) from anywhere within the 
download, so the content doesn't have to be in the top level folder. This is achieved by using find 
to locate the item (e.g. the Adobe Flash Player.pkg from within the Adobe Flash download).
.SH "DATA PLIST"
.IX Header "DATA PLIST"
.SS "\s-1REQUIRED\s0 \s-1KEYS\s0"
.IX Subsection "REQUIRED KEYS"
The data plist needs to contain a dictionary called \fBautoMunkiImporter\fR, which contains a series 
of strings.
.IP "\fBURLToMonitor\fR <string>" 8
.IX Item "URLToMonitor <string>"
This is the \s-1URL\s0 to monitor for new versions of an application
.IP "\fBname\fR <string>" 8
.IX Item "name <string>"
The name used within Munki (and as an identifier in the logs or emails from this script).
.IP "\fBtype\fR <string>" 8
.IX Item "type <string>"
The type needs to be one of the following supported types:\-
.RS 8
.IP "\fBstatic\fR" 8
.IX Item "static"
Use static when the \s-1URL\s0 doesn't change. This is for sites that just update the file at the same \s-1URL\s0 
when a new version is released. E.g. Google Chrome
.IP "\fBdynamic\fR" 8
.IX Item "dynamic"
Use dynamic when the download link on a website changes with each new version. Dynamic also has 
additional required and optional keys. See below:\-
.RS 8
.IP "\fBdownloadLinkRegex\fR \- Required" 8
.IX Item "downloadLinkRegex - Required"
This is the either the text of the download link 
(e.g. \s-1THIS\s0 \s-1TEXT\s0 from: <a href="http://example.com/app.dmg> \s-1THIS\s0 \s-1TEXT\s0 </a>), or a perl compatible 
regular expression for the same text.
.IP "\fBsecondLinkRegex\fR \- Optional" 8
.IX Item "secondLinkRegex - Optional"
Some web pages will redirect to a second page which contains the actual download. In this case this 
key is used to find the download. It works the same as the downloadLinkRegex key, but if the link 
isn't found it then just searches the entire page (for example they use Javascript to cause the 
download to start automatically).
.RE
.RS 8
.RE
.IP "\fBsparkle\fR" 8
.IX Item "sparkle"
Apps that use the Sparkle framework have a \s-1RSS\s0 based Appcast that list updates. This option will 
parse that feed for the update. To find if an app uses Sparkle run: 
\&\f(CW\*(C`find /path/to/app \-name Sparkle.framework \-print\*(C'\fR
.RE
.RS 8
.RE
.IP "\fBitemToImport\fR <string>" 8
.IX Item "itemToImport <string>"
This is the name of the item to be imported into Munki. For example My App.app. Find is used to 
locate the app, so it can be anywhere in the download (even within app bundles).
.SS "\s-1OPTIONAL\s0 \s-1KEYS\s0"
.IX Subsection "OPTIONAL KEYS"
.IP "\fBdisabled\fR <boolean>" 8
.IX Item "disabled <boolean>"
If true, will disable checking of the app. Useful if you are checking a directory of data plists and
want to skip an app without removing it.
.IP "\fBemailReports\fR <boolean>" 8
.IX Item "emailReports <boolean>"
If true, email reports will be sent on successfully importing a new app, or on a critical error 
(besides the initial environment checks)
.IP "\fBemailTo\fR <string>" 8
.IX Item "emailTo <string>"
Email address to send reports to. A default Email address should be specified in the script, but 
if present in the data file it will override the default.
.IP "\fBemailFrom\fR <string>" 8
.IX Item "emailFrom <string>"
Email address to send reports from. A default Email address should be specified in the script, but 
if present in the data file it will override the default.
.IP "\fBlogFile\fR <string>" 8
.IX Item "logFile <string>"
Path to log file. A default log file should be specified in the script, but if present in the data 
file it will override the default.
.IP "\fBmakecatalogs\fR <boolean>" 8
.IX Item "makecatalogs <boolean>"
If true, \fImakecatalogs\fR is run after the app is imported into Munki.
.IP "\fBmunkiimportOptions\fR <string>" 8
.IX Item "munkiimportOptions <string>"
Additional command line options to pass to \fImunkiimport\fR. See munkiimport \-\-help and 
makepkginfo \-\-help for available options.
.Sp
Also see \fB\s-1MUNKI\s0 \s-1KEYS\s0\fR for an additional way of providing data to Munki.
.IP "\fBuserAgent\fR <string>" 8
.IX Item "userAgent <string>"
Some websites return different content based on the User Agent. If this key is present it will 
override the user agent in the script.
.SS "\s-1MUNKI\s0 \s-1KEYS\s0"
.IX Subsection "MUNKI KEYS"
In addition to providing options to munkiimport via the munkiimportOptions key, you can at the top 
level of the data plist include keys that will be copied
across to the pkginfo file.
.PP
This can be useful with items like pre and post scripts, so that instead of having to maintain 
copies of the script, you can just copy the item into the data plist 
like you would to a pkginfo and the script will automatically add it.
.PP
Any keys at the top level of the plist will override those in the generated pkginfo. So if you say 
used the munkiimportOptions key and set \-\-catalog prod, but had a catalog array at the top of the 
data plist that contained 2 strings (autopkg, dev) then the final pkginfo would be set to autopkg, 
and dev, not prod.
.SS "\s-1EXAMPLE\s0"
.IX Subsection "EXAMPLE"
.Vb 10
\& <?xml version="1.0" encoding="UTF\-8"?>
\& <!DOCTYPE plist PUBLIC "\-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList\-1.0.dtd">
\& <plist version="1.0">
\& <dict>
\&        <key>autoMunkiImporter</key>
\&        <dict>
\&                <key>URLToMonitor</key>
\&                <string>http://www.skype.com/go/getskype\-macosx.dmg</string>
\&                <key>name</key>
\&                <string>Skype</string>
\&                <key>type</key>
\&                <string>direct</string>
\&                <key>itemToImport</key>
\&                <string>Skype.app</string>
\&                <key>emailReports</key>
\&                <true/>
\&                <key>makecatalogs</key>
\&                <true/>
\&        </dict>
\&        <key>catalogs</key>
\&        <array>
\&                <string>dev</string>
\&        </array>
\& </dict>
\& </plist>
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This perl script requires the following perl modules to be installed:\-
 * Date::Parse
 * Mail::Mailer
 * URI::Escape
 * \s-1URI::URL\s0
 * WWW:Mechanize
.PP
You can test if a module is installed by running perl \-MModule::Name \-e 1 on the command line. You 
will get an error if it's not installed. Not there is no space between \-M and the module name, 
e.g. \-MDate::Parse.
.PP
It also requires the perlplist.pl script to be in the same directory as this script. Please see that 
script for it's copyright statement.
.SH "FINDING THE URL"
.IX Header "FINDING THE URL"
In Safari you can either right click on a link and \*(L"Copy Link\*(R", or view the pages source to determine 
the \s-1URL\s0.
.PP
For tricker pages, and apps using Sparkle to update I recommend using SquidMan 
http://squidman.net/squidman/.
.SS "\s-1SQUIDMAN\s0"
.IX Subsection "SQUIDMAN"
\&\s-1SQUIDMAN\s0 is a easy to use \s-1SQUID\s0 proxy. We can use it to log all requests, and using this information 
build our data plist.
.PP
Once you have it installed, in the Template under preferences add \*(L"strip_query_terms off\*(R". This will 
cause the entire \s-1URL\s0 to be shown. Start (or restart) SquidMan and then set the proxy server for your 
machine to localhost:8080 (or the appropriate values). Then 
tail \-f ~/Library/Logs/squid/squid\-access.log and you will see what URLs are accessed.
.SH "TROUBLESHOOTING"
.IX Header "TROUBLESHOOTING"
The best strategy is to use curl \-\-head \-\-location http://www.example.com/path/to/url.ext and review
it's content. Sites like Google Code block retrieving headers which is required for this script to 
work. In this case one of the returned headers will be X\-Content-Type-Options: nosniff.
.PP
Also try using different (or no) User Agents (curl \-\-user\-agent \*(L"my agent\*(R").
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Reed <adam.reed@anu.edu.au>
